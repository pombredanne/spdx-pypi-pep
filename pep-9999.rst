PEP: 9999
Title: Metadata for Python Software Packages 2.2
Version: $Revision$
Last-Modified: $Date$
Author: Philippe Ombredanne <pombredanne at nexb.com>
Sponsor: Paul Moore <p.f.moore at gmail.com>
BDFL-Delegate: Paul Moore <p.f.moore at gmail.com>
Discussions-To: https://discuss.python.org/t/improving-license-clarity-with-better-package-metadata
Status: Draft
Type: Standards Track
Content-Type: text/x-rst
Created: 15-Aug-2018
Python-Version: 3.x
Post-History:
Replaces: 566
Resolution:


Abstract
========

This PEP describes the changes between versions 2.1 and 2.2 of the `Core
Metadata Specification`_ for Python packages. Version 2.1 is specified in PEP 566.

The changes introduced in this PEP update how license is documented in Core
metadata using simple yet rich `SPDX License Expression` strings such that
license documentation is simpler and less ambiguous:

- for package authors to create,
- for package users to read and understand, and,
- for tools to process package license information mechanically.

These changes have been designed have a minimal impact and to be backward
compatible with v2.1. They are embrassing emerging new ways to document licenses
that are already in use in some tools (e.g. `license_file` field) or by some
authors (e.g. license expressions in the `license` field). All the packages that
conform with the v2.1 of core metadata specification are also conformaing and
valid with this v2.2.

Beyond this Core metadata specification update, this PEP comes with:

- recommendations for Publishing tools to update how they should soft validate
  the `license` and `classifier` fields to report informational warnings to user
  when packages uses older style of license documentation conventions.

- a reference library to parse and validate `License Expression` such that tools
  can easily parse, validate and build correct license expressions.

Finally it is the intent of the PEP authors to work closely with tools authors
to implement to recommended `License` field validation and warnings specified
in this PEP.


What this PEP is not about and possible future PEPs
===================================================

This PEP and its authors are neutral with regards to using this or that license.

The SPDX license expression syntax proposed in this PEP provides simpler and
more expressive conventions to document more accurately any kind of license that
applies to a Python package, whether under an open source, free or libre
software license or proprietary license.

Therefore this PEP makes no recommendation to force using certain licenses or
or even certain license documentation conventions and does not recommend any
license at all (including any license restriction when uploading to Pypi).

Instead it only enacts in documentation some common and/or improved practices
alreday in use, and recommend that Publishing tools should gently nag users with
informational warnings when they do not follow this PEP recommendations.

However, it is the intention of the authors of this PEP to consider further
related but separate PEPs in the future such as:

 - making the existing `License` and new `License-File` fields mandatory
   including stricter enforcement in tools and in Pypi uploads.

 - restricting the upload of packages using non-FOSS (Free or open
   source software) licenses to the public Pypi index.


Rationale
=========

Software is licensed and providing accurate licensing information to Python
packages users is an important matter.  Today, there are multiple places where
license is documented in package metadata and there are limitations to what can
be documented. This is often leading to confusion or a lack of clarity both for
package authors and package users.

Several package authors have expressed difficulty and/or frustrations with the
possibilities to express licensing in package metadata. This also applies
to distro packager. This has triggered several license-related discussions and
issues and in particular:

- `<https://github.com/pypa/warehouse/issues/2996>`_
- `<https://github.com/pypa/interoperability-peps/issues/46>`_
- `<https://github.com/pypa/packaging-problems/issues/41>`_
- `<https://github.com/pypa/wheel/issues/138>`_
- `<https://github.com/pombredanne/spdx-pypi-pep/issues/1#issuecomment-281343077>`_

And on average, Python packages tend to have more ambiguous or missing license
information than other main application package formats (such as npm, Maven or
Gem) as can be seen of the `stats page of the ClearlyDefined project
<https://clearlydefined.io/stats>_`. (ClearlyDefined is an open source project
to help improve clarity of other open source projecs and is incubating at the
`OSI <http://opensource>_`.

For reference, a mini survey of existing license metadata definitions in use in
Python today and documented in several other system/distro and application
package formats is provided at the bottom of this PEP.

There are a few takeaways from this survey:

- Many modern package formats use some form of license expression syntax to
  optionally combine more than one license identifiers together. SPDX and
  SPDX-like syntaxes are the most popular in use.

- SPDX license ids are becomming a de-facto way to reference common licenses
  everywhere, whether or not a license expression syntax is used. But they often
  need to be supplemented with extra license ids or conventions to accept
  extra or generic licenses such as "Proprietary" or "Public domain" not tracked
  by SPDX.

- Several package format support documenting both a license expression and
  the paths of the corresponding files that contain the license text. Most
  free and open source software licenses require to include their full text in
  a distribution.

These considerations have guided the updates proposed in this PEP.

License expressions provide a simpler way to express the license of a
distribution using a well defined syntax and well known license ids.

Over time, recommending the usage of these expressions will help Python
package publishers improve the clarity of their license documentation to the
benefit of packages authors, consumers and redistributors.


Core Metadata Specification updates
===================================

The canonical source for the names and semantics of each of the supported
metadata fields is the `Core Metadata Specification`_ document.

The details of the updates considered to the `Core Metadata Specification`_
document as part of his PEP are detailed here and will be added to the
canonical source once this PEP is approved.


Added in Version 2.2
--------------------

License-File (multiple use)
:::::::::::::::::::::::::::

The is a string that is a package-root relative path to a license file. The
license file content __must__ be UTF-8-encoded text.

Build tools should honor this field and include the corresponding license file(s)
in the built package.

Note that this is field already exists in `wheel` and `setuptools` with this
behaviour. Therefore this addition to the Core metadata is only recognizing
and documenting an existing practice as used in `wheels` (with the `license_file`
and `license_files` `setup.cfg` `[metadata]` entries) and in `setuptools`
`license_file` `setup()` argument.


Changed in Version 2.2
----------------------

License (optional)
::::::::::::::::::

Text indicating the license covering the distribution. This text can be either
a valid `License Expression` (as defined below) or any free text.

Publishing tools SHOULD issue an informational warning if this field is empty
or missing or is not a valid `License Expression` as defined here. Build tools
MAY issue such a warning too.


License Expression
''''''''''''''''''

A `License Expression` is a string using the SPDX license expression syntax
as documented in the `SPDX specification`_  using either `Version 2.1
<https://spdx.org/spdx-specification-21-web-version#h.jxpfx0ykyb60>`_
or a later compatible version.

As an extension to the SPDX license expression syntax, a `License Expression` can
use the following license identifiers:

- any SPDX-listed license short-form identifiers that are published in the 
  `SPDX License List`_ using either Version 3.6 of this list or any later
  compatible version. Note that the SPDX working group never removes any
  license identifiers: instead they may only one as obsolete.

- the `Public-Domain` and `Proprietary` strings to support generic ids that are
  not available in the SPDX license list.

When processing the `License` field to determine if it contains a valid license
expression, tools:

- MUST ignore the case of the `License` field.

- SHOULD report an informational warning if field does not contain a license
  expression or if the license expression syntax is invalid or the license
  identifiers are unknown or the license identifiers have been marked as
  obsolete in the `SPDX License List`_.

- SHOULD store a case-normalized version of the `License` field using the
  reference case for each SPDX license identifier and uppercase for the AND, OR
  and WITH keywords.

License expression examples::

    License: MIT

    License: BSD-3-Clause

    License: MIT OR GPL-2.0-or-later OR (FSFUL AND BSD-2-Clause)

    License: GPL-3.0-only WITH Classpath-Exception-2.0 OR BSD-3-Clause

    License: This software may only be obtained by sending the
            author a postcard, and then the user promises not
            to redistribute it.

    License: Proprietary AND Public-Domain


Classifier (multiple use)
:::::::::::::::::::::::::

Each entry is a string giving a single classification value for the distribution.
Classifiers are described in PEP 301.

Examples::

    Classifier: Development Status :: 4 - Beta
    Classifier: Environment :: Console (Text Based)

Tools SHOULD issue an informational warning if this field contains a
licensing related Classifier string starting with the `License::` prefix and
SHOULD suggest the use of a `License Expression` in the `License` field instead.

If the `License` field is present and contains a valid License Expression,
publishing tools MUST NOT also provide any licensing related Classifiers entries.

However, for compatibility with existing publishing and installation processes,
licensing related Classifiers entries SHOULD continue to be accepted if the
License field is absent or does not contain a valid License Expression.

Publishing tools MAY infer a License Expression from the provided Classifiers
entries if they are able to do so unambiguously.

However, no new licensing related classifiers will be added, with anyone
requesting them being directed to use a License Expression in the License field
instead. Note that the licensing related Classifiers may be deprecated in a
future PEP.


Mapping legacy Classifiers to new License expressions
'''''''''''''''''''''''''''''''''''''''''''''''''''''

Publishing tools MAY infer or suggest an equivalent `License Expression` from
the provided License or Classifiers information if they are able to do so
unambiguously. For instance, if a package only has this license classifier::

    Classifier: `License :: OSI Approved :: MIT License`

Then the corresponding value for License using a valid license expression to
suggest would be::

    License: MIT


Here are mappings guidelines for the legacy classifiers:

- Classifier `License :: Other/Proprietary License` becomes License: `Proprietary` expression.

- Classifier `License :: Public Domain` becomes License: `Public-Domain` expression.

- The generic and ambiguous Classifiers `License :: OSI Approved`
  and `License :: DFSG approved` do not have an equivalent license expression.

- The generic and sometimes ambiguous Classifiers `License :: Free For Educational Use`,
  `License :: Free For Home Use`, `License :: Free for non-commercial use`,
  `License :: Freely Distributable`, `License :: Free To Use But Restricted`,
  and `License :: Freeware` are mapped to the generic License: `Proprietary` expression.

The remainder of the `Classifiers` using a `License::` prefix map to a simple
single license expression using the corresponding SPDX license identifiers.


Summary of Differences From PEP 566
===================================

* Metadata-Version is now 2.2.

* Added one new field: ``License-File``

* Updated the documentation of two fields:  ``License`` and ``Classifiers``


License Expression Library Reference implementation
===================================================

To be succesful, `License Expression` need to be supported in tools.

The `license-expression library`_ provides a Python reference implementation
library to handle `License Expressions` including parsing, validating and
formatting `License Expressions` using flexible list of license symbols
(including SPDX license identifiers and extra identifiers referenced here).
It is licensed under the Apache-2.0 license and is used in a few projects such
as the SPDX Python tools, the ScanCode toolkit and the FSFE Reuse.software
project.

If this PEP is accepted, the Python packaging authority should consider
adopting the `license-expression library`_ as one of its own tools
<https://github.com/pypa>_.


References
==========

This document specifies version 2.2 of the metadata format.

- Version 1.0 is specified in PEP 241.
- Version 1.1 is specified in PEP 314.
- Version 1.2 is specified in PEP 345.
- Version 2.0, while not formally accepted, was specified in PEP 426.
- Version 2.1 is specified in PEP 566.

.. _`Core Metadata Specification`:
   https://packaging.python.org/specifications/core-metadata/

.. _`SPDX License List`:
   https://spdx.org/licenses/

.. _`SPDX Specification`:
   https://spdx.org/specifications

.. _`license-expression library`:
   https://github.com/nexB/license-expression/


Copyright
=========

This document is placed in the public domain or under the
CC0-1.0-Universal license, whichever is more permissive.


Acknowledgements
================

- Luis Villa
- Cyril Roelandt
- Kevin P. Fleming
- Nick Coghlan




..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 80
   End:
